// Submits data to the controller when the input values change
// and replaces the output with the data generated by the controller.
$(document).ready(function () {
    $("#format_id").bind("change", function () {
        updateOutput();
    });

    $('#data_samples_input').on('input', function(){
        updateOutput();
    });

    var generateSampleButton = $("#generate_sample_button");
    // Prevent receiving same click event twice
    generateSampleButton.unbind( "click" );

    generateSampleButton.click(function (event) {
        event.preventDefault();
        generateData();
    });
});

var updateButtonDisabledStatus = function() {
    var formatId = $('#format_id').val();
    if (formatId == null || formatId.toString() ==='') {
        $("#generate_sample_button").attr('disabled', 'disabled');
    } else {
        $("#generate_sample_button").removeAttr('disabled');
    }
};

var updateOutput = function() {
    var formatId = $('#format_id').val();
    var dataSample = $('#data_samples_input').val();
    var shortenedSample = (dataSample.toString()).replace(/(^[ \t]*\n)/gm, "");

    updateButtonDisabledStatus();

    if (formatId == null || formatId.toString() === '') {
        $("#outputdiv").html("Format is not chosen yet, please select a format!");
        return;
    } else if (dataSample == null || dataSample.toString() === '') {
        $("#outputdiv").html("Input is empty, please provide some input!");
        return;
    }

    $.ajax('/preview', {
        method: 'GET',
        dataType: "json",
        data: {
            format_id: formatId,
            data_sample: shortenedSample
        },
        success: function(data) {
            // noinspection JSUnresolvedVariable
            if (data.preview != null) {
                $("#outputdiv").html(data.preview);
            }
            // noinspection JSUnresolvedVariable
            if (data.faultyLineNumber != null) {
                console.log("Faulty Line");
                // noinspection JSUnresolvedVariable
                selectTextareaLine($('#data_samples_input')[0], data.faultyLineNumber);
            }
        },
        error: function (e) {
            console.log("Error");
            console.log(e.toString());
        }
    });
};

var generateData = function() {
    $.ajax('/preview/sample', {
        method: 'GET',
        dataType: "json",
        data: {
            format_id: $('#format_id').val()
        },
        success: function(data) {
            // noinspection JSUnresolvedVariable
            $('#data_samples_input').val(data.sample);
            updateOutput();
        },
        error: function (e) {
            console.log("Error");
            console.log(e.toString());
        }
    });
};

var selectTextareaLine = function(area,lineNum) {
    console.log(area.value);
    var lines = area.value.split("\n");

    // calculate start/end
    var startPos = 0, endPos = area.value.length;
    for(var x = 0; x < lines.length; x++) {
        if(x == lineNum) {
            break;
        }
        startPos += (lines[x].length+1);

    }

    var endPos = lines[lineNum].length+startPos;

    // do selection
    // Chrome / Firefox

    if(typeof(area.selectionStart) != "undefined") {
        area.focus();
        area.selectionStart = startPos;
        area.selectionEnd = endPos;
        return true;
    }

    // IE
    if (document.selection && document.selection.createRange) {
        area.focus();
        area.select();
        var range = document.selection.createRange();
        range.collapse(true);
        range.moveEnd("character", endPos);
        range.moveStart("character", startPos);
        range.select();
        return true;
    }

    return false;
}
