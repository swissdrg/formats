// Submits data to the controller when the input values change
// and replaces the output with the data generated by the controller.
(function( preview, $, undefined ) {
    var editor = null;

    const MIN_LINES = 1;
    const MAX_LINES = 10000;

    // LOAD

    preview.setup = function () {
        loadEditor();
        updateButtonDisabledStatus();

        var generateSampleButton = $("#generate_sample_button");
        // Prevent receiving same click event twice
        generateSampleButton.unbind( "click" );

        generateSampleButton.click(function (event) {
            event.preventDefault();
            generateData();
        });

        $("#format_id").bind("change", function () {
            updateOutput();
        });

        editor.getSession().on('change', function() {
            updateOutput();
        });
    };

    function loadEditor() {
        editor = ace.edit("data_samples_input");
        editor.setValue('');
        editor.setOptions({
            'minLines': 10,
            'maxLines': 20,
            'showPrintMargin': false
        });
        editor.$blockScrolling = Infinity; // Disables a warning message in ace
        applyLengthLimit();
    };

    function applyLengthLimit() {
        var doc = editor.session.doc;
        doc.applyAnyDelta = doc.applyAnyDelta || doc.applyDelta
        doc.applyDelta = function(delta) {
            if (delta.action === "insert" && this.$maxLength
                && this.getValue().length > this.$maxLength) {
                return false;
            }
            return this.applyAnyDelta(delta);
        };
        doc.$maxLength = 10000
    }

    // UPDATE

    function updateButtonDisabledStatus() {
        var formatId = $('#format_id').val();

        if (formatId == null || formatId.toString() ==='') {
            $("#generate_sample_button").attr('disabled', 'disabled');
            $("#number_of_lines").attr('disabled', 'disabled');
        } else {
            $("#generate_sample_button").removeAttr('disabled');
            $("#number_of_lines").removeAttr('disabled');
        }
    }

    function updateOutput() {
        var formatId = $('#format_id').val();
        var dataSample = editor.getValue();
        var shortenedSample = (dataSample.toString()).replace(/(^[ \t]*\n)/gm, "");

        updateButtonDisabledStatus();

        if (formatId == null || formatId.toString() === '') {
            $("#outputdiv").html("Format is not chosen yet, please select a format!");
            return;
        } else if (dataSample == null || dataSample.toString() === '') {
            $("#outputdiv").html("Input is empty, please provide some input!");
            return;
        }

        $.ajax('/preview', {
            method: 'GET',
            dataType: "json",
            data: {
                format_id: formatId,
                data_sample: shortenedSample
            },
            success: function(data) {
                // noinspection JSUnresolvedVariable
                if (data.preview != null) {
                    $("#outputdiv").html(data.preview);
                }
                // noinspection JSUnresolvedVariable
                if (data.faultyLineNumber != null) {
                    editor.session.setAnnotations([{
                        row: data.faultyLineNumber,
                        column: 0,
                        text: "Not enough or incorrect variables",
                        type: "error"
                    }]);
                } else {
                    editor.session.setAnnotations();
                }
            },
            error: function (e) {
                console.log("Error");
                console.log(e.toString());
            }
        });
    }

    // HELPERS

    function generateData() {

        var formatId = $('#format_id').val();
        var number_of_lines = $('#number_of_lines').val();

        // error handling before sending data to controller
        if (number_of_lines == null || number_of_lines === '') {
            number_of_lines = (Math.round(Math.random() * MAX_LINES + MIN_LINES)).toString();
        } else if (!isInteger(number_of_lines)) {
            $("#outputdiv").html("Number of lines must be an integer!");
            return;
        } else if (parseInt(number_of_lines) < MIN_LINES || parseInt(number_of_lines) > MAX_LINES) {
            $("#outputdiv").html("Number of lines is out of range (1-10000)!");
            return;
        }

        $.ajax('/preview/sample', {
            method: 'GET',
            dataType: "json",
            data: {
                format_id: formatId,
                number_of_lines: number_of_lines
            },
            success: function(data) {
                editor.setValue(data.sample);
                updateOutput();
            },
            error: function (e) {
                console.log("Error");
                console.log(e.toString());
            }
        });
    }

    function isInteger(num){
        return num.match(/^-{0,1}\d+$/)
    }
}( window.preview = window.preview || {}, jQuery ));